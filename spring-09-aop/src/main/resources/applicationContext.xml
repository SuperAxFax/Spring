<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--注册bean-->
    <bean id="userService" class="com.kuang.service.UserServiceImpl"/>
    <bean id="log" class="com.kuang.log.Log"/>
    <bean id="afterlog" class="com.kuang.log.AfterLog"/>

    <!--方式一：使用原生Spring API接口-->
    <!--配置aop:需要导入aop的约束-->
   <!-- <aop:config>
        &lt;!&ndash;切入点：说明我们需要在哪执行我们的切入点&ndash;&gt;
        &lt;!&ndash;切入点：expression:表达式，execution(要执行的位置！)&ndash;&gt;
        &lt;!&ndash;*代表是任意的东西，给这个类去插入一些方法com.kuang.service.UserServiceImpl， .*指的是这个类下的
        所有方法，(..)表示里面任意的参数&ndash;&gt;
        &lt;!&ndash;表明我们定位的代码会在com.kuang.service.UserServiceImpl中来执行！&ndash;&gt;
        <aop:pointcut id="pointcut" expression="execution(* com.kuang.service.UserServiceImpl.*(..))"/>

        &lt;!&ndash;执行环绕增强，指的是具体怎么执行！&ndash;&gt;
        &lt;!&ndash;接下来这一句指的是将log里面的方法切入在pointcut的位置来执行&ndash;&gt;
        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
        <aop:advisor advice-ref="afterlog" pointcut-ref="pointcut"/>
    </aop:config>
-->
    <!--方式二：自定义类-->
    <!--<bean id="diy" class="com.kuang.diy.DiyPointCut"/>
    <aop:config>
        &lt;!&ndash;使用切面aop:aspect,自定义切面，ref要引用的类&ndash;&gt;
        <aop:aspect ref="diy">
            &lt;!&ndash;切入点&ndash;&gt;
            <aop:pointcut id="point" expression="execution(* com.kuang.service.UserServiceImpl.*(..))"/>
            &lt;!&ndash;通知，指接下来要执行什么方法！&ndash;&gt;
            <aop:before method="before" pointcut-ref="point"/>
            <aop:after method="after" pointcut-ref="point"/>
        </aop:aspect>
    </aop:config>-->
    <!--方式二没有方式一强大，但是比方式一简单-->

    <!--方式三-->
    <bean id="annotationPointCut" class="com.kuang.diy.AnnotationPointCut"/>
    <!--开启注解支持！ JDK（默认proxy-target-class="false"）  cglib：false改为true就是使用cglib来实现！-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
</beans>